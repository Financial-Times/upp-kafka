apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ .Values.service.name }} 
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}" 
    visualize: "true" 
    app: {{ .Values.service.name }} 
spec:
  replicas: 1 # keeping a single replica in the stateful set
  serviceName: {{.Values.service.name}}
  selector: 
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true" 
    spec:
      tolerations:
      # Making sure that Kafka will be scheduled on dedicated nodes. These nodes are tainted by the provisioner.
      - key: "dedicated"
        operator: "Equal"
        value: "kafka"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kube-aws.coreos.com/role
                operator: In
                values:
                - kafka-worker
      initContainers:
        # Wait until zk is accessible
        - name: waitfordns
          image: "alpine:3.6"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - "i=0; while [ $i -lt 120 ]; do ping -c1 {{ .Values.service.name }}-0 && break; let i=i+1; sleep 1; done"
      containers:
      - name: kafka
        image: {{ .Values.images.kafka }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: KAFKA_MESSAGE_MAX_BYTES
          value: "16777216"
        - name: KAFKA_REPLICA_FETCH_MAX_BYTES
          value: "16777216"
        - name: DOCKER_HOST
          value: "localhost:2375"
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: "{{.Values.service.name}}-0.kafka.default.svc.cluster.local"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{.Values.service.name}}-zookeeper:{{ .Values.ports.zookeeper }}"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_PORT
          value: "{{ .Values.ports.kafka }}"
        - name: KAFKA_ADVERTISED_PORT
          value: "{{ .Values.ports.kafka }}"
        ports:
        - containerPort: {{ .Values.ports.kafka }}
        livenessProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: {{ .Values.ports.kafka }}
        volumeMounts:
         - name: kafka-persistent-storage
           mountPath: /kafka
           subPath: kafka-data
        resources: 
{{ toYaml .Values.kafkaResources | indent 12 }}
      volumes:
       - name: kafka-persistent-storage
         persistentVolumeClaim:
           claimName: "{{ .Values.service.name }}-pvc"

